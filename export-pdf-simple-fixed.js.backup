#!/usr/bin/env node

const puppeteer = require('puppeteer');
const path = require('path');
const fs = require('fs');

/**
 * Fullscreen WebSlides PDF Export
 * Generates PDF that matches the exact appearance of F11 fullscreen mode
 * - Optimized viewport (1920x1080, 16:9 aspect ratio)
 * - Hidden navigation elements
 * - Fullscreen layout with centered content
 * - Proper page breaks for each slide
 */

async function exportToPDF() {
  const htmlFile = 'carbon_market_trends_2024_2025_standalone.html';
  const outputFile = 'Carbon_Market_CDP_Presentation_Fullscreen.pdf';
  
  console.log('🚀 Starting fullscreen PDF export (F11 mode simulation)...');
  
  // Check if HTML file exists
  const htmlPath = path.resolve(__dirname, htmlFile);
  if (!fs.existsSync(htmlPath)) {
    console.error('❌ HTML file not found:', htmlPath);
    return;
  }
  
  let browser;
  try {
    // Launch browser with file access permissions
    browser = await puppeteer.launch({
      headless: 'new',
      args: [
        '--no-sandbox', 
        '--disable-setuid-sandbox',
        '--allow-file-access-from-files',
        '--disable-web-security',
        '--disable-features=VizDisplayCompositor'
      ]
    });
    
    const page = await browser.newPage();
    
    // Set viewport for fullscreen presentation (16:9 aspect ratio)
    await page.setViewport({
      width: 1920,
      height: 1080,
      deviceScaleFactor: 1
    });
    
    const fileUrl = `file://${htmlPath}`;
    console.log(`📄 Loading: ${htmlFile}`);
    
    // Load the page with proper error handling
    await page.goto(fileUrl, {
      waitUntil: 'networkidle0',
      timeout: 30000
    });
    
    // Wait for content to render
    console.log('⏳ Waiting for content to load...');
    await page.waitForTimeout(5000);
    
    // Ensure all images are loaded before proceeding
    console.log('🖼️ Checking image loading status...');
    await page.evaluate(() => {
      return Promise.all(
        Array.from(document.images).map(img => {
          if (img.complete) {
            return Promise.resolve();
          } else {
            return new Promise((resolve, reject) => {
              img.addEventListener('load', resolve);
              img.addEventListener('error', () => {
                console.warn(`Failed to load image: ${img.src}`);
                resolve(); // Continue even if image fails
              });
            });
          }
        })
      );
    });
    
    console.log('✅ All images processed');
    
    // Debug: List all image sources and their status
    const imageStatus = await page.evaluate(() => {
      const images = Array.from(document.images);
      return images.map(img => ({
        src: img.src,
        complete: img.complete,
        naturalWidth: img.naturalWidth,
        naturalHeight: img.naturalHeight,
        alt: img.alt
      }));
    });
    
    console.log('📋 Image status report:');
    imageStatus.forEach((img, index) => {
      const status = img.complete && img.naturalWidth > 0 ? '✅' : '❌';
      console.log(`  ${status} ${img.alt || 'Unknown'}: ${img.src.split('/').pop()}`);
    });
    
    // Apply fullscreen WebSlides styles
    console.log('🔄 Applying fullscreen mode styles...');
    await page.addStyleTag({
      content: `
        /* Fullscreen WebSlides mode simulation */
        html, body {
          margin: 0 !important;
          padding: 0 !important;
          overflow: hidden !important;
        }
        
        #webslides {
          width: 100vw !important;
          height: 100vh !important;
        }
        
        .ws-ready #webslides > section {
          width: 100vw !important;
          height: 100vh !important;
          display: block !important;
          position: relative !important;
          transform: none !important;
          left: 0 !important;
          top: 0 !important;
        }
        
        .ws-ready #webslides > section .wrap {
          max-width: 90vw !important;
          max-height: 90vh !important;
          width: 100% !important;
          height: 100% !important;
          display: flex !important;
          flex-direction: column !important;
          justify-content: center !important;
          align-items: center !important;
          margin: 0 auto !important;
        }
        
        /* Override WebSlides positioning completely */
        #webslides {
          transform: none !important;
          transition: none !important;
        }
        
        #webslides > section {
          transform: none !important;
          transition: none !important;
          left: 0 !important;
          right: 0 !important;
          top: 0 !important;
          bottom: 0 !important;
          margin: 0 !important;
          position: relative !important;
        }
        
        /* Hide navigation elements for fullscreen */
        .ws-nav, .ws-counter, .ws-pagination,
        .ws-ready .ws-nav, .ws-ready .ws-counter, .ws-ready .ws-pagination {
          display: none !important;
        }
        
        /* Force each slide to be on separate page with aggressive CSS */
        @page {
          size: A4 landscape;
          margin: 0.2in;
        }
        
        @media print {
          * {
            -webkit-print-color-adjust: exact !important;
            color-adjust: exact !important;
          }
          
          #webslides {
            height: auto !important;
          }
          
          #webslides > section {
            page-break-after: always !important;
            page-break-before: auto !important;
            page-break-inside: avoid !important;
            break-after: page !important;
            break-before: auto !important;
            break-inside: avoid !important;
            height: 95vh !important;
            min-height: 95vh !important;
            width: 100vw !important;
            position: relative !important;
            display: block !important;
            margin: 0 !important;
            padding: 1vh 1vw !important;
            box-sizing: border-box !important;
            overflow: hidden !important;
          }
          
          #webslides > section:last-child {
            page-break-after: avoid !important;
            break-after: avoid !important;
          }
          
          /* Ensure content doesn't overflow */
          #webslides > section .wrap {
            height: auto !important;
            max-height: 90vh !important;
            width: 100% !important;
            overflow: visible !important;
            display: flex !important;
            flex-direction: column !important;
            justify-content: center !important;
          }
        }
      `
    });
    
    // Remove navigation elements and force proper section layout
    await page.evaluate(() => {
      const navElements = document.querySelectorAll('.ws-nav, .ws-counter, .ws-pagination');
      navElements.forEach(el => el.remove());
      
      // Force each section to be visible and properly spaced for PDF
      const sections = document.querySelectorAll('#webslides > section');
      sections.forEach((section, index) => {
        section.style.display = 'block';
        section.style.position = 'relative';
        section.style.width = '100vw';
        section.style.height = '100vh';
        section.style.pageBreakAfter = 'always';
        section.style.pageBreakInside = 'avoid';
        
        // Clear any transform or positioning that might stack slides
        section.style.transform = 'none';
        section.style.left = '0';
        section.style.top = '0';
        
        if (index === sections.length - 1) {
          section.style.pageBreakAfter = 'avoid';
        }
      });
      
      return sections.length;
    });
    
    // Get and display slide count
    const slideCount = await page.evaluate(() => {
      return document.querySelectorAll('#webslides > section').length;
    });
    
    console.log(`📊 Processing ${slideCount} slides for PDF generation...`);
    console.log('📖 Generating PDF...');
    
    // Generate PDF with proper page handling
    await page.pdf({
      path: outputFile,
      format: 'A4',
      landscape: true,
      printBackground: true,
      preferCSSPageSize: false,
      margin: {
        top: '0.2in',
        bottom: '0.2in',
        left: '0.2in',
        right: '0.2in'
      },
      scale: 0.85,
      displayHeaderFooter: true,
      headerTemplate: '<div></div>',
      footerTemplate: `
        <div style="font-size: 9px; width: 100%; text-align: center; color: #666; margin: 0;">
          <span class="pageNumber"></span> / <span class="totalPages"></span>
        </div>
      `
    });
    
    console.log(`✅ Fullscreen PDF exported successfully: ${outputFile}`);
    console.log(`📊 Total slides exported: ${slideCount}`);
    console.log('📐 Format: Matches F11 fullscreen mode appearance with optimized layout');
    
  } catch (error) {
    console.error('❌ Export failed:', error.message);
    if (error.stack) {
      console.error('Stack trace:', error.stack);
    }
  } finally {
    if (browser) {
      await browser.close();
      console.log('🧹 Browser closed');
    }
  }
}

// Run the export
exportToPDF().then(() => {
  console.log('🎉 Export process completed');
}).catch((error) => {
  console.error('💥 Fatal error:', error);
  process.exit(1);
});