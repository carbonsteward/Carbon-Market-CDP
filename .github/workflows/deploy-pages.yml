name: Deploy Carbon Market CDP Presentation to GitHub Pages

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Pages
        uses: actions/configure-pages@v4
        with:
          enablement: true
        
      - name: Prepare deployment files
        run: |
          # Create deployment directory
          mkdir -p _site
          
          # SECURITY-FIRST DEPLOYMENT: Only HTML presentation files and their directly referenced images
          echo "🔒 SECURITY-FIRST: Deploying only presentation HTML files and referenced images"
          
          # Define presentation HTML files (whitelist approach)
          presentation_files="carbon_market_trends_2024_2025_standalone.html index.html"
          
          # Copy whitelisted HTML presentation files
          for html_file in $presentation_files; do
            if [ -f "$html_file" ]; then
              if [ "$html_file" = "carbon_market_trends_2024_2025_standalone.html" ]; then
                cp "$html_file" _site/index.html
                echo "✅ Main presentation copied as index.html (primary landing page)"
              elif [ "$html_file" = "index.html" ]; then
                cp "$html_file" _site/landing.html
                echo "✅ Original landing page copied as landing.html"
              else
                cp "$html_file" _site/
                echo "✅ $html_file copied"
              fi
            fi
          done
          
          # Auto-extract images referenced in HTML files (dynamic approach)
          echo "🔍 Extracting images referenced in presentation HTML files..."
          referenced_images=""
          
          for html_file in $presentation_files; do
            if [ -f "$html_file" ]; then
              echo "   📋 Scanning $html_file for image references..."
              file_images=$(grep -o 'src="[^"]*\.\(jpg\|png\|svg\|gif\|webp\)' "$html_file" | sed 's/src="//g' | sort -u)
              for img_path in $file_images; do
                if [ -f "$img_path" ]; then
                  referenced_images="$referenced_images $img_path"
                  echo "   ✅ Found referenced image: $img_path"
                fi
              done
            fi
          done
          
          # Remove duplicates and copy only referenced images
          referenced_images=$(echo $referenced_images | tr ' ' '\n' | sort -u | tr '\n' ' ')
          
          echo "📋 Copying only images referenced in presentation files..."
          for img_path in $referenced_images; do
            if [ -f "$img_path" ]; then
              # Create directory structure in _site if needed
              mkdir -p "_site/$(dirname "$img_path")"
              cp "$img_path" "_site/$img_path"
              echo "✅ $img_path copied (referenced in presentation)"
            else
              echo "⚠️  WARNING: $img_path referenced in HTML but missing from repository"
            fi
          done
          
          # Validate all referenced images were successfully deployed
          echo "🔍 Validating all referenced images were deployed..."
          missing_images_found=false
          
          for html_file in $presentation_files; do
            if [ -f "$html_file" ]; then
              echo "   📋 Validating images in $html_file..."
              file_images=$(grep -o 'src="[^"]*\.\(jpg\|png\|svg\|gif\|webp\)' "$html_file" | sed 's/src="//g' | sort -u)
              
              for img_path in $file_images; do
                if [ ! -f "_site/$img_path" ]; then
                  echo "🚨 DEPLOYMENT ERROR: Image '$img_path' referenced in $html_file but not deployed!"
                  echo "   ❌ Image exists in repo: $([ -f "$img_path" ] && echo "YES" || echo "NO")"
                  missing_images_found=true
                fi
              done
            fi
          done
          
          # Fail build if missing images detected to prevent broken deployments
          if [ "$missing_images_found" = true ]; then
            echo ""
            echo "💥 BUILD FAILED: Referenced images missing from deployment"
            echo "📋 This indicates a bug in the deployment script"
            echo "📚 Check DEPLOYMENT_TROUBLESHOOTING.md for guidance"
            echo ""
            exit 1
          fi
          
          echo "✅ All referenced images successfully deployed"
          
          # Copy .nojekyll to ensure GitHub Pages doesn't process Jekyll
          if [ -f ".nojekyll" ]; then
            cp .nojekyll _site/
            echo "✅ Jekyll bypass configured"
          fi
          
          # Comprehensive security verification
          echo "🔍 SECURITY VERIFICATION: Ensuring only presentation files are deployed"
          
          # Check for sensitive file types
          sensitive_files=$(find _site -type f \( -name "*.pdf" -o -name "*.csv" -o -name "*.docx" -o -name "*.xlsx" -o -name "*.pptx" -o -name "*.zip" -o -name "*.md" -o -name "*.js" -o -name "*.sh" -o -name "*.json" \) 2>/dev/null | head -10)
          
          if [ -n "$sensitive_files" ]; then
            echo "❌ SECURITY ALERT: Sensitive/complementary files detected in deployment!"
            echo "   📋 Found files:"
            echo "$sensitive_files"
            echo "   🛡️  Security-first policy: Only HTML presentation files and referenced images allowed"
            exit 1
          fi
          
          # Verify only expected file types are deployed
          echo "   📋 Verifying only HTML and image files are deployed..."
          unexpected_files=$(find _site -type f ! \( -name "*.html" -o -name "*.jpg" -o -name "*.png" -o -name "*.svg" -o -name "*.gif" -o -name "*.webp" -o -name ".nojekyll" \) 2>/dev/null)
          
          if [ -n "$unexpected_files" ]; then
            echo "❌ SECURITY ALERT: Unexpected file types detected!"
            echo "   📋 Found files:"
            echo "$unexpected_files"
            echo "   🛡️  Only HTML presentations and referenced images are permitted"
            exit 1
          fi
          
          # Count and verify deployed files
          html_count=$(find _site -name "*.html" | wc -l)
          image_count=$(find _site \( -name "*.jpg" -o -name "*.png" -o -name "*.svg" -o -name "*.gif" -o -name "*.webp" \) | wc -l)
          
          echo "✅ SECURITY VERIFICATION PASSED"
          echo "   📊 Deployed: $html_count HTML files, $image_count images"
          echo "   🛡️  Only presentation-related files deployed"
          
          echo "📊 Final deployment contents:"
          ls -la _site/
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: _site

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
      - name: Deployment Success Notification
        run: |
          echo "🚀 Deployment successful!"
          echo "📊 Presentation URL: ${{ steps.deployment.outputs.page_url }}"
          echo "⏱️  Deployment completed at: $(date)"